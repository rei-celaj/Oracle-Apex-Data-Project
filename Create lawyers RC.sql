CREATE TABLE LAWYER
( LAWYER_ID NUMBER(3)
, FIRST_NAME VARCHAR2(50)
, LAST_NAME VARCHAR2(50)
, BILL_RATE NUMBER(6,2)
, PAY_RATE NUMBER(8)
, CONSTRAINT LAWYER_PK PRIMARY KEY (LAWYER_ID)
);

CREATE TABLE SPECIALTY
( SPECIALTY_ID NUMBER(3)
, DESCRIPTION VARCHAR2(500)
, CONSTRAINT SPECIALTY_PK PRIMARY KEY (SPECIALTY_ID)
);

CREATE TABLE LAWYER_SPECIALTY
( LAWYER_ID NUMBER(3)
, SPECIALTY_ID NUMBER(3)
, CONSTRAINT LAWYER_SPECIALTY_PK PRIMARY KEY (LAWYER_ID, SPECIALTY_ID)
, CONSTRAINT LAWYER_SPECIALTY_LAWYER_FK FOREIGN KEY (LAWYER_ID) REFERENCES LAWYER(LAWYER_ID)
, CONSTRAINT LAWYER_SPECIALTY_SPECIALTY_FK FOREIGN KEY (SPECIALTY_ID) REFERENCES SPECIALTY(SPECIALTY_ID)
);

CREATE TABLE CLIENT
( CLIENT_ID NUMBER(5)
, CLIENT_NAME VARCHAR2(50)
, STREET_ADDRESS VARCHAR2(50)
, CITY VARCHAR2(30)
, STATE VARCHAR2(20) 
, ZIPCODE VARCHAR2(5)
, CONSTRAINT CLIENT_PK PRIMARY KEY (CLIENT_ID)
);

CREATE TABLE CONTACT
( CONTACT_ID NUMBER(3)
, CLIENT_ID NUMBER(5)
, FIRST_NAME VARCHAR2(50) 
, LAST_NAME VARCHAR2(50)  
, CONSTRAINT CONTACT_PK PRIMARY KEY (CONTACT_ID)
, CONSTRAINT CONTACT_CLIENT_FK FOREIGN KEY (CLIENT_ID) REFERENCES CLIENT(CLIENT_ID) 
);

CREATE TABLE PHONE
( PHONE_ID NUMBER(3) 
, CONTACT_ID NUMBER(3)
, PHONE_TYPE VARCHAR2(20) 
, PHONE_NUMBER VARCHAR2(15) 
, CONSTRAINT PHONE_PK PRIMARY KEY (PHONE_ID)
, CONSTRAINT PHONE_CONTACT_FK FOREIGN KEY (CONTACT_ID) REFERENCES CONTACT(CONTACT_ID) 
); 

CREATE TABLE CASES
( CASE_ID NUMBER(5) 
, PRIMARY_LAWYER_ID NUMBER(3)
, DESCRIPTION VARCHAR2(500)
, TOTAL_COST NUMBER(8)
, BEGIN_DATE DATE
, REQUIRED_COMPLETION_DATE DATE
, CLOSE_DATE DATE
, CONSTRAINT CASE_PK PRIMARY KEY (CASE_ID)
, CONSTRAINT CASE_LAWYER_FK FOREIGN KEY (PRIMARY_LAWYER_ID) REFERENCES LAWYER(LAWYER_ID) 
); 

CREATE TABLE CASE_CONTACT
( CASE_ID NUMBER(5)
, CONTACT_ID NUMBER(3)
, CONSTRAINT CASE_CONTACT_PK PRIMARY KEY (CASE_ID, CONTACT_ID)
, CONSTRAINT CASE_CONTACT_CASE_FK FOREIGN KEY (CASE_ID) REFERENCES CASES(CASE_ID)
, CONSTRAINT CASE_CONTACT_CONTACT_FK FOREIGN KEY (CONTACT_ID) REFERENCES CONTACT(CONTACT_ID)
);

CREATE TABLE LOGS    
( LOG_ID NUMBER(5) 
, LAWYER_ID NUMBER(3) 
, CASE_ID NUMBER(5)
, LOG_DATE DATE
, TIME_SPENT NUMBER(3)
, WORK_DONE VARCHAR2(500)
, CONSTRAINT LOG_PK PRIMARY KEY (LOG_ID)
, CONSTRAINT LOG_LAWYER_FK FOREIGN KEY (LAWYER_ID) REFERENCES LAWYER(LAWYER_ID) 
, CONSTRAINT LOG_CASE_FK FOREIGN KEY (CASE_ID) REFERENCES CASES(CASE_ID)
); 

CREATE TABLE CALENDAR
( APPOINTMENT_ID NUMBER(5) 
, LAWYER_ID NUMBER(3) 
, CONTACT_ID NUMBER(3)
, DATE_TIME DATE
, DURATION NUMBER(2)
, PURPOSE VARCHAR2(500)
, CONSTRAINT CALENDAR_PK PRIMARY KEY (APPOINTMENT_ID)
, CONSTRAINT CALENDAR_LAWYER_FK FOREIGN KEY (LAWYER_ID) REFERENCES LAWYER(LAWYER_ID) 
, CONSTRAINT CALENDAR_CONTACT_FK FOREIGN KEY (CONTACT_ID) REFERENCES CONTACT(CONTACT_ID)
); 


CREATE SEQUENCE lawyer_seq      INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE specialty_seq   INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE client_seq      INCREMENT BY 1 START WITH 1;  
CREATE SEQUENCE contact_seq     INCREMENT BY 1 START WITH 1; 
CREATE SEQUENCE phone_seq       INCREMENT BY 1 START WITH 1; 
CREATE SEQUENCE case_seq        INCREMENT BY 1 START WITH 1;  
CREATE SEQUENCE log_seq         INCREMENT BY 1 START WITH 1; 
CREATE SEQUENCE calendar_seq    INCREMENT BY 1 START WITH 1; 


CREATE OR REPLACE TRIGGER INSERT_lawyer 
BEFORE INSERT ON lawyer
FOR EACH ROW
DECLARE
  new_id number;
BEGIN
  SELECT lawyer_seq.nextval INTO new_id FROM dual;
  :new.lawyer_id := new_id;
END;
/

CREATE OR REPLACE TRIGGER INSERT_specialty 
BEFORE INSERT ON specialty
FOR EACH ROW
DECLARE
  new_id number;
BEGIN
  SELECT specialty_seq.nextval INTO new_id FROM dual;
  :new.specialty_id := new_id;
END;
/

CREATE OR REPLACE TRIGGER INSERT_client 
BEFORE INSERT ON client
FOR EACH ROW
DECLARE
  new_id number;
BEGIN
  SELECT client_seq.nextval INTO new_id FROM dual;
  :new.client_id := new_id;
END;
/

CREATE OR REPLACE TRIGGER INSERT_contact
BEFORE INSERT ON contact
FOR EACH ROW
DECLARE
  new_id number;
BEGIN
  SELECT contact_seq.nextval INTO new_id FROM dual;
  :new.contact_id := new_id;
END;
/

CREATE OR REPLACE TRIGGER INSERT_phone
BEFORE INSERT ON phone
FOR EACH ROW
DECLARE
  new_id number;
BEGIN
  SELECT phone_seq.nextval INTO new_id FROM dual;
  :new.phone_id := new_id;
END;
/

CREATE OR REPLACE TRIGGER INSERT_case
BEFORE INSERT ON cases
FOR EACH ROW
DECLARE
  new_id number;
BEGIN
  SELECT case_seq.nextval INTO new_id FROM dual;
  :new.case_id := new_id;
END;
/

CREATE OR REPLACE TRIGGER INSERT_log
BEFORE INSERT ON logs
FOR EACH ROW
DECLARE
  new_id number;
BEGIN
  SELECT log_seq.nextval INTO new_id FROM dual;
  :new.log_id := new_id;
END;
/

CREATE OR REPLACE TRIGGER INSERT_calendar 
BEFORE INSERT ON calendar
FOR EACH ROW
DECLARE
  new_id number;
BEGIN
  SELECT calendar_seq.nextval INTO new_id FROM dual;
  :new.appointment_id := new_id;
END;
/

-- 1. List all lawyers in alphabetic order with their annual salaries and billing rates.
CREATE VIEW VW_LAWYER_COSTS(LAST_NAME, FIRST_NAME, BILLING_RATE, ANNUAL_SALARY) AS
SELECT LAST_NAME, FIRST_NAME, BILL_RATE, PAY_RATE
FROM LAWYER
ORDER BY LAST_NAME, FIRST_NAME; 

-- 2. List all lawyers with a description of their specialties alphabetic order
CREATE VIEW VW_LAWYER_SPECIALTIES_INORDER(LAST_NAME, FIRST_NAME, DESCRIPTION) AS 
SELECT LAST_NAME, FIRST_NAME, DESCRIPTION 
FROM LAWYER, SPECIALTY, LAWYER_SPECIALTY 
WHERE LAWYER.LAWYER_ID = LAWYER_SPECIALTY.LAWYER_ID and SPECIALTY.SPECIALTY_ID = LAWYER_SPECIALTY.SPECIALTY_ID 
ORDER BY LAST_NAME, FIRST_NAME;

--3. List all clients with their address alphabetically
CREATE VIEW VW_CLIENT_ADDRESS_INORDER(CLIENT_NAME, STREET_ADDRESS, ZIPCODE, STATE, CITY) AS 
SELECT CLIENT_NAME, STREET_ADDRESS, ZIPCODE, STATE, CITY
FROM CLIENT 
ORDER BY CLIENT_NAME;

--4. List all specialties in alphabetical order
CREATE VIEW VW_SPECIALTY_INORDER(DESCRIPTION) AS 
SELECT DESCRIPTION 
FROM SPECIALTY
ORDER BY DESCRIPTION; 

--5. List all lawyers in alphabetic order that are primary lawyers 
CREATE VIEW VW_PRIMARY_LAWYERS_INORDER(LAST_NAME, FIRST_NAME, DESCRIPTION) AS
SELECT L.LAST_NAME, L.FIRST_NAME, DESCRIPTION
FROM LAWYER L, CASES C
WHERE L.LAWYER_ID = C.PRIMARY_LAWYER_ID 
ORDER BY LAST_NAME, FIRST_NAME; 

--6. List all clients with contacts and phone numbers in alphabetical order 
CREATE VIEW VW_CLIENT_CONTACT_NUMBER_INORDER(CLIENT_NAME, CONTACT_LAST_NAME, CONTACT_FIRST_NAME, PHONE_TYPE, PHONE_NUMBER) AS 
SELECT C.CLIENT_NAME, CT.LAST_NAME, CT.FIRST_NAME, P.PHONE_TYPE, P.PHONE_NUMBER
FROM CLIENT C, CONTACT CT, PHONE P 
WHERE C.CLIENT_ID = CT.CLIENT_ID and CT.CONTACT_ID = P.CONTACT_ID 
ORDER BY C.CLIENT_NAME, CT.LAST_NAME;

--7. List all clients with their cases in alphabetical order
CREATE VIEW VW_CLIENT_CASES_INORDER(DESCRIPTION, TOTAL_COST, BEGIN_DATE, REQUIRED_COMPLETION_DATE, CLOSE_DATE, CLIENT_NAME) AS 
SELECT DESCRIPTION, TOTAL_COST, BEGIN_DATE, REQUIRED_COMPLETION_DATE, CLOSE_DATE, CLIENT_NAME
FROM CLIENT C, CASES CS, CONTACT CT, CASE_CONTACT CST 
WHERE CS.CASE_ID = CST.CASE_ID and CST.CONTACT_ID = CT.CONTACT_ID and C.CLIENT_ID = CT.CLIENT_ID 
ORDER BY CLIENT_NAME;

--8. List all appointements in time order with Lawyer and purpose
CREATE VIEW VW_APPOINTMENT_DAY_LAWYER(PURPOSE, DATE_TIME, FIRST_NAME, LAST_NAME) AS 
SELECT PURPOSE, DATE_TIME, FIRST_NAME, LAST_NAME
FROM LAWYER L, CALENDAR C 
WHERE L.LAWYER_ID = C.LAWYER_ID 
ORDER BY DATE_TIME;

--9. List all primary lawyers with their clients 
CREATE VIEW VW_PRIMARY_LAWYER_CLIENT(FIRST_NAME, LAST_NAME, CLIENT_NAME, DESCRIPTION) AS 
SELECT L.FIRST_NAME, L.LAST_NAME, CLIENT_NAME, DESCRIPTION
FROM LAWYER L, CASES C, CASE_CONTACT CST, CONTACT CT, CLIENT C
WHERE L.LAWYER_ID = C.PRIMARY_LAWYER_ID and (C.CASE_ID = CST.CASE_ID and CST.CONTACT_ID = CT.CONTACT_ID and C.CLIENT_ID = CT.CLIENT_ID); 

--10. List all cases with primary lawyer
CREATE VIEW VW_CASES_PRIMARY_LAWYER(DESCRIPTION, TOTAL_COST, BEGIN_DATE, REQUIRED_COMPLETION_DATE, CLOSE_DATE, FIRST_NAME, LAST_NAME) AS 
SELECT DESCRIPTION, TOTAL_COST, BEGIN_DATE, REQUIRED_COMPLETION_DATE, CLOSE_DATE, FIRST_NAME, LAST_NAME 
FROM CASES C, LAWYER L 
WHERE C.PRIMARY_LAWYER_ID = L.LAWYER_ID;

--11. List all clients with their cases 
CREATE VIEW VW_CLIENT_CASES(CLIENT_NAME, DESCRIPTION, TOTAL_COST, BEGIN_DATE, REQUIRED_COMPLETION_DATE, CLOSE_DATE) AS 
SELECT CLIENT_NAME, DESCRIPTION, TOTAL_COST, BEGIN_DATE, REQUIRED_COMPLETION_DATE, CLOSE_DATE
FROM CLIENT C, CASES CS, CONTACT CT, CASE_CONTACT CST 
WHERE CS.CASE_ID = CST.CASE_ID and CST.CONTACT_ID = CT.CONTACT_ID and C.CLIENT_ID = CT.CLIENT_ID; 

--12. List a daily schedule for each lawyer 
CREATE VIEW VW_LAWYER_SCHEDULE(FIRST_NAME, LAST_NAME, DATE_TIME, PURPOSE, DURATION, CLIENT_NAME) AS
SELECT L.FIRST_NAME, L.LAST_NAME, DATE_TIME, PURPOSE, DURATION, CLIENT_NAME
FROM LAWYER L, CALENDAR C, CONTACT CO, CLIENT CL 
WHERE L.LAWYER_ID = C.LAWYER_ID and C.CONTACT_ID = CO.CONTACT_ID and CL.CLIENT_ID = CO.CLIENT_ID; 

--13. List all Case information 
CREATE VIEW VW_CASE_INFO(CASE_ID, DESCRIPTION, CLIENT_NAME, PRIMARY_LAWYER, LOG_DATE, LAWYER_NAME, WORK_DONE, TIME_SPENT, BILLED_TIME) AS
SELECT distinct c.case_id, C.DESCRIPTION, CL.CLIENT_NAME, p.FIRST_NAME || ' ' || p.LAST_NAME primary_lawyer, LO.LOG_DATE,
L.FIRST_NAME || ' ' || L.LAST_NAME lawyer_name, LO.WORK_DONE, LO.TIME_SPENT,
L.BILL_RATE * LO.TIME_SPENT 
FROM lawyer p, LAWYER L, CASES C, LOGS LO, CASE_CONTACT CST, CONTACT CT, CLIENT CL
WHERE C.Primary_LAWYER_ID = p.LAWYER_ID and l.lawyer_id = lo.lawyer_id and LO.CASE_ID = C.CASE_ID and C.CASE_ID = CST.CASE_ID and CST.CONTACT_ID = CT.CONTACT_ID and CT.CLIENT_ID = CL.CLIENT_ID;

--14. List all lawyers with case info along with total cost of case 
CREATE VIEW VW_LAWYER_CASE_INFO_TOTAL_INORDER(LAWYER_NAME, BILLED_TIME, DESCRIPTION, CLIENT_NAME, DATE_WORKED, TOTAL_COST) AS 
SELECT L.FIRST_NAME || ' ' || L.LAST_NAME, LO.TIME_SPENT * L.BILL_RATE, C.DESCRIPTION, CL.CLIENT_NAME, LO.LOG_DATE, C.TOTAL_COST    
FROM LAWYER L, CASES C, LOGS LO, CASE_CONTACT CST, CONTACT CT, CLIENT CL
WHERE LO.LAWYER_ID = L.LAWYER_ID and C.CASE_ID = CST.CASE_ID and CST.CONTACT_ID = CT.CONTACT_ID and CT.CLIENT_ID = CL.CLIENT_ID and C.CASE_ID = LO.CASE_ID
ORDER BY L.LAST_NAME, L.FIRST_NAME;